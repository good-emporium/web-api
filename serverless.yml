service: web-api

provider:
  name: aws
  region: us-east-2
  runtime: python3.6
  memorySize: 128
  timeout: 10

  deploymentBucket:
    name: good-emporium-artifacts

  environment:
    CLOUD_ENV: ${opt:env, 'd'}
    CLOUD_REGION: "us-east-2"
    JWT_SECRET: ${opt:jwt_secret, 'secret'}
    TABLE_ORGANIZATIONS: ${self:provider.environment.CLOUD_ENV}-organizations
    TABLE_USERS: ${self:provider.environment.CLOUD_ENV}-users

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-2:*:table/*"

package:
  include:
    - functions/*.py

plugins:
  - serverless-offline-python
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux

cors: &cors
  origins:
    - '*'
  headers:
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
  allowCredentials: false

functions:
#  auth:
#    handler: functions/lambda_handler.authorize

  get-jwt-token:
    handler: functions/lambda_handler.encode_token
    events:
      - http:
          path: token
          method: get
          cors: *cors
          request:
            parameters:
              querystrings:
                username: true
                password: true

  list-organizations:
    handler: functions/lambda_handler.list_organizations
    events:
      - http:
          path: organizations
          method: get
          cors: *cors

  create-organization:
    handler: functions/lambda_handler.create_organization
    events:
      - http:
          path: organizations
          method: post
#          authorizer: auth
          cors: *cors

  create-organizations:
    handler: functions/lambda_handler.create_organizations
    events:
      - http:
          path: organizations/many
          method: post
  #        authorizer: auth
          cors: *cors

#  update-organizations:
#    handler: functions/lambda_handler.update_organizations
#    events:
#      - http:
#          path: organizations/many
#          method: patch
#          cors: *cors

  retrieve-organization:
    handler: functions/lambda_handler.retrieve_organization
    events:
      - http:
          path: organizations/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          cors: *cors

  update-organization:
    handler: functions/lambda_handler.update_organization
    events:
      - http:
          path: organizations/{id}
          method: patch
#          authorizer: auth
          request:
            parameters:
              paths:
                id: true
          cors: *cors

  delete-organization:
    handler: functions/lambda_handler.delete_organization
    events:
      - http:
          path: organizations/{id}
          method: delete
#          authorizer: auth
          cors: *cors
          request:
            parameters:
              paths:
                id: true

  create-user:
    handler: functions/lambda_handler.create_user
    events:
      - http:
          path: users
          method: post
          cors: *cors

  change-email:
    handler: functions/lambda_handler.change_email
    events:
      - http:
          path: users/{username}/email
          method: patch
  #        authorizer: auth
          cors: *cors
          request:
            parameters:
              paths:
                username: true
